{"version":3,"sources":["function.js","App.js","serviceWorker.js","index.js"],"names":["initList","size","n","list","Array","i","color","value","Math","floor","random","swap","a","x","y","t","sleep","ms","Promise","resolve","setTimeout","App","props","algorithms","defaultSpeed","defaultNumber","state","algorithm","number","speed","originList","map","elm","isShowValue","onChangAlgorithm","bind","onSort","onStop","compare","done","onChangeSpeed","onChangeNumber","onGenerate","onToggleShowValue","onResore","keep","move","e","target","this","setState","onBubbleSort","onInsertionSort","onSelectionSort","onHeapSort","onMergeSort","onQuickSort","isSorting","isNaN","isSorted","length","isSwapped","j","key","setBack","quickSort","isCanceled","low","high","partion","pi","chosePivot","pivot","compareWithPivot","heapSort","heapify","largest","r","l","mergeSort","m","merge","n1","n2","L","R","k","min_idx","Fragment","className","style","marginRight","onChange","toUpperCase","placeholder","disabled","onClick","height","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.44c0d34a.chunk.js","sourcesContent":["export function initList(size) {\n    const list = new Array(size)\n    // console.log(list)\n\n    for (let i = 0; i < size; i++) {\n        list[i] = {\n            color: \"gray\",\n            value: random(100)\n        }\n    }\n    return list\n}\n// From 0 to n (eq)\nexport function random(n) {\n    return Math.floor(Math.random() * n) + 1;\n}\n\nexport function swap(a, x, y) {\n    const t = a[x].value\n    a[x].value = a[y].value\n    a[y].value = t\n}\n\nexport function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// src/function.js","import React, { Component } from 'react';\nimport { initList, swap, sleep } from './function'\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\t// Init default values\n\t\tthis.algorithms = [\n\t\t\t'Bubble sort',\n\t\t\t'Insertion sort',\n\t\t\t'Selection sort',\n\t\t\t'Heap sort',\n\t\t\t'Merge sort',\n\t\t\t'Quick sort',\n\t\t]\n\t\tthis.defaultSpeed = 0\n\t\tthis.defaultNumber = 50\n\t\tconst list = initList(this.defaultNumber)\n\t\tthis.state = {\n\t\t\talgorithm: 'Bubble sort',\n\t\t\tnumber: this.defaultNumber,\n\t\t\tspeed: this.defaultSpeed,\n\t\t\toriginList: list.map(elm => { return { ...elm } }),\n\t\t\tlist,\n\t\t\tisShowValue: true,\n\t\t}\n\t\tthis.onChangAlgorithm = this.onChangAlgorithm.bind(this)\n\t\tthis.onSort = this.onSort.bind(this)\n\t\tthis.onStop = this.onStop.bind(this)\n\t\tthis.compare = this.compare.bind(this)\n\t\tthis.swap = this.swap.bind(this)\n\t\tthis.done = this.done.bind(this)\n\t\tthis.onChangeSpeed = this.onChangeSpeed.bind(this)\n\t\tthis.onChangeNumber = this.onChangeNumber.bind(this)\n\t\tthis.onGenerate = this.onGenerate.bind(this)\n\t\tthis.onToggleShowValue = this.onToggleShowValue.bind(this)\n\t\tthis.onResore = this.onResore.bind(this)\n\t\tthis.keep = this.keep.bind(this)\n\t\tthis.move = this.move.bind(this)\n\t}\n\t// <-- Common \n\tonChangAlgorithm(e) {\n\t\tconst { value } = e.target\n\t\tthis.setState({ algorithm: value })\n\t}\n\n\tasync onSort(algorithm) {\n\t\tswitch (algorithm) {\n\t\t\tcase this.algorithms[0]: {\n\t\t\t\tawait this.onBubbleSort()\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase this.algorithms[1]: {\n\t\t\t\tawait this.onInsertionSort()\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase this.algorithms[2]: {\n\t\t\t\tawait this.onSelectionSort()\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase this.algorithms[3]: {\n\t\t\t\tawait this.onHeapSort()\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase this.algorithms[4]: {\n\t\t\t\tawait this.onMergeSort()\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase this.algorithms[5]: {\n\t\t\t\tawait this.onQuickSort()\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tonStop() {\n\t\tthis.setState({\n\t\t\tisSorting: false,\n\t\t})\n\t}\n\n\tasync onChangeSpeed(e) {\n\t\tlet speed = e.target.value\n\t\tif (isNaN(speed)) return\n\t\t// if (speed <= 0) speed = 1\n\t\tthis.setState({ speed })\n\t}\n\n\tasync onChangeNumber(e) {\n\t\tconst number = e.target.value\n\t\tif (isNaN(number)) return\n\t\tconst list = initList(number === '' ? this.defaultNumber : number)\n\t\tthis.setState({\n\t\t\tnumber,\n\t\t\toriginList: list.map(elm => { return { ...elm } }),\n\t\t\tlist,\n\t\t\tisSorted: false,\n\t\t\tisShowValue: number <= 100\n\t\t})\n\t}\n\n\tonGenerate() {\n\t\tconst list = initList(this.state.list.length)\n\t\tthis.setState({\n\t\t\toriginList: list.map(elm => { return { ...elm } }),\n\t\t\tlist,\n\t\t\tisSorted: false\n\t\t})\n\t}\n\n\tonToggleShowValue() {\n\t\tthis.setState({\n\t\t\tisShowValue: !this.state.isShowValue\n\t\t})\n\t}\n\n\tonResore() {\n\t\tthis.setState({\n\t\t\tlist: this.state.originList.map(elm => { return { ...elm } }),\n\t\t\tisSorted: false\n\t\t})\n\t}\n\n\t// --> Common \n\n\t// <-- Bubble sort\n\tasync compare(x, y) {\n\t\tlet { list, speed } = this.state\n\t\tif (speed === '') speed = this.defaultSpeed\n\t\t// Blue state\n\t\tlist[x].color = 'blue'\n\t\tlist[y].color = 'blue'\n\t\tthis.setState({ list })\n\t\tawait sleep(speed * 1000)\n\t\t// Normal state\n\t\tlist[x].color = 'gray'\n\t\tlist[y].color = 'gray'\n\t\tthis.setState({ list })\n\n\t}\n\n\tasync swap(x, y) {\n\t\tlet { list, speed } = this.state\n\t\tif (speed === '') speed = this.defaultSpeed\n\t\t// Green state\n\t\tlist[x].color = 'green'\n\t\tlist[y].color = 'green'\n\t\tthis.setState({ list })\n\t\tawait sleep(speed * 1000 / 2)\n\t\t// Swap\n\t\tswap(list, x, y)\n\t\tthis.setState({ list })\n\t\tawait sleep(speed * 1000 / 2)\n\t\t// Normal state\n\t\tlist[x].color = 'gray'\n\t\tlist[y].color = 'gray'\n\t\tthis.setState({ list })\n\n\t}\n\n\tdone(x, n = x) {\n\t\tconst { list } = this.state\n\t\t// Yellow state\n\t\tfor (let i = x; i <= n; i++) {\n\t\t\tlist[i].color = 'yellow'\n\t\t\tthis.setState({ list })\n\t\t}\n\n\t}\n\n\t// Normal bubble sort algorithm\n\t// async onSort() {\n\t// \t// Start sort\n\t// \tthis.setState({ isSorting: true }, async () => {\n\n\t// \t\t// Sort\n\t// \t\tconst { list, originList } = this.state\n\t// \t\tconst n = list.length\n\t// \t\tfor (let i = 0; i < n - 1; i++) {\n\t// \t\t\tfor (let j = 0; j < n - 1 - i; j++) {\n\t// \t\t\t\tawait this.compare(j, j + 1)\n\t// \t\t\t\t// Stop\n\t// \t\t\t\tif (!this.state.isSorting) {\n\t// \t\t\t\t\tthis.setState({\n\t// \t\t\t\t\t\tlist: originList.map(elm => { return { ...elm } }),\n\t// \t\t\t\t\t})\n\t// \t\t\t\t\treturn\n\t// \t\t\t\t}\n\t// \t\t\t\t// -->\n\t// \t\t\t\tif (list[j].value > list[j + 1].value) {\n\t// \t\t\t\t\tawait this.swap(j, j + 1)\n\t// \t\t\t\t}\n\n\t// \t\t\t}\n\t// \t\t\tawait this.done(n - 1 - i)\n\t// \t\t\tif (n - 1 - i === 1) {\n\t// \t\t\t\tawait this.done(0)\n\t// \t\t\t\t// End sort\n\t// \t\t\t\tthis.setState({ isSorting: false })\n\t// \t\t\t}\n\t// \t\t}\n\t// \t})\n\t// }\n\n\t// Enhanced bubble sort algorithm\n\tasync onBubbleSort() {\n\t\t// Start sort\n\t\tthis.setState({ isSorting: true }, async () => {\n\t\t\t// Sort\n\t\t\tconst { list, originList } = this.state\n\t\t\tconst n = list.length\n\n\t\t\tlet isSwapped\n\t\t\tlet i = 1\n\t\t\tdo {\n\t\t\t\tisSwapped = false;\n\t\t\t\tfor (let j = 0; j < n - i; j++) {\n\t\t\t\t\tawait this.compare(j, j + 1)\n\t\t\t\t\t// Stop\n\t\t\t\t\tif (!this.state.isSorting) {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tlist: originList.map(elm => { return { ...elm } }),\n\t\t\t\t\t\t})\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\t// -->\n\t\t\t\t\tif (list[j].value > list[j + 1].value) {\n\t\t\t\t\t\tisSwapped = true\n\t\t\t\t\t\tawait this.swap(j, j + 1)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.done(n - i)\n\t\t\t\tif (!isSwapped) {\n\t\t\t\t\tthis.done(0, n - i - 1)\n\t\t\t\t\t// End sort\n\t\t\t\t\tthis.setState({ isSorting: false, isSorted: true })\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile (isSwapped === true)\n\t\t})\n\t}\n\t// --> Bubble sort\n\n\t// <-- Insertion sort\n\tasync keep(x) {\n\t\tlet { list, speed } = this.state\n\t\tif (speed === '') speed = this.defaultSpeed\n\t\t// Green state\n\t\tlist[x].color = 'blue'\n\t\tthis.setState({ list })\n\t\tawait sleep(speed * 1000 / 2)\n\t\t// Normal state\n\t\tlist[x].color = 'white'\n\t\tthis.setState({ list })\n\t\tawait sleep(speed * 1000 / 2)\n\n\t}\n\n\tasync move(x, y) {\n\t\tlet { list, speed } = this.state\n\t\tif (speed === '') speed = this.defaultSpeed\n\t\t// Green state\n\t\tlist[x].color = 'green'\n\t\tthis.setState({ list })\n\t\tawait sleep(speed * 1000 / 2)\n\t\t// Move\n\t\tlist[y].value = list[x].value\n\t\tlist[y].color = list[x].color\n\t\tlist[x].color = 'white'\n\t\tthis.setState({ list })\n\t\tawait sleep(speed * 1000 / 2)\n\t\t// Normal state\n\t\tlist[y].color = 'gray'\n\t\tthis.setState({ list })\n\t}\n\n\tasync setBack(x) {\n\t\tlet { list, speed } = this.state\n\t\tif (speed === '') speed = this.defaultSpeed\n\t\t// Yellow state\n\t\tlist[x].color = 'yellow'\n\t\tthis.setState({ list })\n\t\tawait sleep(speed * 1000 / 2)\n\t\t// Normal state\n\t\tlist[x].color = 'gray'\n\t\tthis.setState({ list })\n\n\t}\n\n\tasync onInsertionSort() {\n\t\t// Start sort\n\t\tthis.setState({ isSorting: true }, async () => {\n\t\t\t// Sort\n\t\t\tconst { list, originList } = this.state\n\t\t\tconst n = list.length\n\n\t\t\tfor (let i = 1; i < n; i++) {\n\t\t\t\t// Keep consider element (key)\n\t\t\t\tawait this.keep(i)\n\t\t\t\tconst key = list[i].value\n\t\t\t\t// Stop listener\n\t\t\t\tif (!this.state.isSorting) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tlist: originList.map(elm => { return { ...elm } }),\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\t// -->\n\t\t\t\t// Move elements greater than key\n\t\t\t\tlet j = i - 1\n\t\t\t\twhile (j >= 0 && list[j].value > key) {\n\t\t\t\t\tawait this.move(j, j + 1)\n\n\t\t\t\t\tj--\n\t\t\t\t}\n\t\t\t\t// Set back key\n\t\t\t\tlist[j + 1].value = key\n\t\t\t\tawait this.setBack(j + 1)\n\t\t\t}\n\t\t\t// End sort\n\t\t\tthis.setState({ isSorting: false, isSorted: true })\n\t\t})\n\t}\n\n\t// --> Insertion sort\n\n\t// <-- Quick sort\n\n\tasync chosePivot(x) {\n\t\tlet { list, speed } = this.state\n\t\tif (speed === '') speed = this.defaultSpeed\n\t\tlist[x].color = 'pink'\n\t\tthis.setState({ list })\n\t\tawait sleep(speed * 1000)\n\t}\n\n\tasync compareWithPivot(x) {\n\t\tlet { list, speed } = this.state\n\t\tif (speed === '') speed = this.defaultSpeed\n\t\tlist[x].color = 'blue'\n\t\tthis.setState({ list })\n\t\tawait sleep(speed * 1000)\n\t\tlist[x].color = 'gray'\n\t\tthis.setState({ list })\n\t}\n\n\tasync onQuickSort() {\n\t\t// Start sort\n\t\tthis.setState({ isSorting: true }, async () => {\n\t\t\t// Sort\n\t\t\tconst { list } = this.state\n\t\t\tconst n = list.length\n\n\t\t\tawait this.quickSort(list, 0, n - 1)\n\t\t\t// End sort\n\t\t\tthis.setState({\n\t\t\t\tisSorting: false,\n\t\t\t\tisSorted: !this.state.isCanceled,\n\t\t\t\tisCanceled: false\n\t\t\t})\n\t\t})\n\n\t}\n\n\tasync quickSort(list, low, high) {\n\t\tif (low < high) { // Break condition of recursive\n\t\t\tconst pi = await this.partion(list, low, high)\n\t\t\tawait this.quickSort(list, low, pi - 1)\n\t\t\tawait this.quickSort(list, pi + 1, high)\n\t\t}\n\t}\n\n\tasync partion(list, low, high) {\n\t\t// Chose pivot\n\t\tawait this.chosePivot(high)\n\t\tconst pivot = list[high].value\n\t\tlet i = low - 1\n\t\tfor (let j = low; j <= high - 1; j++) {\n\t\t\t// Stop listener\n\t\t\tconst { originList } = this.state\n\t\t\tif (!this.state.isSorting) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tlist: originList.map(elm => { return { ...elm } }),\n\t\t\t\t\tisCanceled: true\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// -->\n\t\t\t// Compare with pivot\n\t\t\tawait this.compareWithPivot(j)\n\t\t\tif (list[j].value <= pivot) {\n\t\t\t\ti++\n\t\t\t\t// Swap\n\t\t\t\tawait this.swap(i, j)\n\t\t\t}\n\t\t}\n\t\t// Swap\n\t\tawait this.swap(i + 1, high)\n\n\t\treturn i + 1\n\t}\n\n\t// --> Quick sort\n\n\t// <-- Heap sort\n\tasync onHeapSort() {\n\t\tthis.setState({ isSorting: true }, async () => {\n\t\t\t// Sort\n\t\t\tconst { list } = this.state\n\t\t\tconst n = list.length\n\n\t\t\tawait this.heapSort(list, n)\n\t\t\t// End sort\n\t\t\tthis.setState({\n\t\t\t\tisSorting: false,\n\t\t\t\tisSorted: !this.state.isCanceled,\n\t\t\t\tisCanceled: false\n\t\t\t})\n\t\t})\n\n\t}\n\n\tasync heapSort(list, n) {\n\t\t// Build heap (rearrange array) \n\t\tfor (let i = Math.floor(n / 2 - 1); i >= 0; i--)\n\t\t\tawait this.heapify(list, n, i);\n\t\t// One by one extract an element from heap \n\t\tfor (let i = n - 1; i > 0; i--) {\n\t\t\t// Move current root to end \n\t\t\tawait this.swap(0, i)\n\t\t\t// call max heapify on the reduced heap \n\t\t\tawait this.heapify(list, i, 0);\n\t\t}\n\t}\n\n\tasync heapify(list, n, i) {\n\t\tlet largest = i; // Initialize largest as root \n\t\tlet l = 2 * i + 1; // left = 2*i + 1 \n\t\tlet r = 2 * i + 2; // right = 2*i + 2 \n\t\t// If left child is larger than root \n\t\tif (l < n && list[l].value > list[largest].value)\n\t\t\tlargest = l;\n\t\t// If right child is larger than largest so far \n\t\tif (r < n && list[r].value > list[largest].value)\n\t\t\tlargest = r;\n\t\t// If largest is not root \n\t\tif (largest != i) {\n\t\t\tawait this.swap(i, largest)\n\t\t\t// Recursively heapify the affected sub-tree \n\t\t\tawait this.heapify(list, n, largest);\n\t\t}\n\t}\n\t// --> Heap sort\n\t// <-- Merge sort\n\n\tasync onMergeSort() {\n\t\tthis.setState({ isSorting: true }, async () => {\n\t\t\t// Sort\n\t\t\tconst { list } = this.state\n\t\t\tconst n = list.length\n\n\t\t\tawait this.mergeSort(list, 0, n - 1)\n\t\t\t// End sort\n\t\t\tthis.setState({\n\t\t\t\tisSorting: false,\n\t\t\t\tisSorted: !this.state.isCanceled,\n\t\t\t\tisCanceled: false\n\t\t\t})\n\t\t})\n\t}\n\t/* l is for left index and r is right index of the \n\t   sub-array of arr to be sorted */\n\tasync mergeSort(list, l, r) {\n\t\tif (l < r) { // Break point of recursive\n\t\t\t// Same as (l+r)/2, but avoids overflow for large l and h \n\t\t\tconst m = l + Math.floor((r - l) / 2);\n\t\t\t// Sort first and second halves \n\t\t\tawait this.mergeSort(list, l, m);\n\t\t\tawait this.mergeSort(list, m + 1, r);\n\n\t\t\tawait this.merge(list, l, m, r);\n\t\t}\n\t}\n\n\tasync merge(list, l, m, r) {\n\t\tlet i, j, k;\n\t\tlet n1 = m - l + 1;\n\t\tlet n2 = r - m;\n\n\t\t/* create temp arrays */\n\t\tlet L = new Array(n1), R = new Array(n2);\n\n\t\t/* Copy data to temp arrays L[] and R[] */\n\t\tfor (i = 0; i < n1; i++)\n\t\t\tL[i] = list[l + i].value;\n\t\tfor (j = 0; j < n2; j++)\n\t\t\tR[j] = list[m + 1 + j].value;\n\n\t\t/* Merge the temp arrays back into arr[l..r]*/\n\t\ti = 0; // Initial index of first subarray \n\t\tj = 0; // Initial index of second subarray \n\t\tk = l; // Initial index of merged subarray \n\t\twhile (i < n1 && j < n2) {\n\t\t\tif (L[i] <= R[j]) {\n\t\t\t\tlist[k].value = L[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlist[k].value = R[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk++;\n\t\t}\n\n\t\t/* Copy the remaining elements of L[], if there \n\t\t   are any */\n\t\twhile (i < n1) {\n\t\t\tlist[k].value = L[i];\n\t\t\ti++;\n\t\t\tk++;\n\t\t}\n\n\t\t/* Copy the remaining elements of R[], if there \n\t\t   are any */\n\t\twhile (j < n2) {\n\t\t\tlist[k].value = R[j];\n\t\t\tj++;\n\t\t\tk++;\n\t\t}\n\t}\n\t// --> Merge sort\n\t// <-- Selection sort\n\n\n\n\tasync onSelectionSort() {\n\t\tthis.setState({ isSorting: true }, async () => {\n\t\t\t// Sort\n\t\t\tconst { list } = this.state\n\t\t\tconst n = list.length\n\n\t\t\tlet i, j, min_idx;\n\t\t\t// One by one move boundary of unsorted subarray  \n\t\t\tfor (i = 0; i < n - 1; i++) {\n\t\t\t\t// Find the minimum element in unsorted array  \n\t\t\t\tmin_idx = i;\n\t\t\t\tfor (j = i + 1; j < n; j++) {\n\t\t\t\t\t// Stop listener\n\t\t\t\t\tconst { originList } = this.state\n\t\t\t\t\tif (!this.state.isSorting) {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tlist: originList.map(elm => { return { ...elm } }),\n\t\t\t\t\t\t})\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\t// -->\n\t\t\t\t\tawait this.compare(j, min_idx)\n\t\t\t\t\tif (list[j].value < list[min_idx].value)\n\t\t\t\t\t\tmin_idx = j;\n\t\t\t\t}\n\n\t\t\t\t// Swap the found minimum element with the first element  \n\t\t\t\tawait this.swap(min_idx, i);\n\t\t\t\tthis.done(i)\n\t\t\t}\n\t\t\tthis.done(n - 1)\n\t\t\t// End sort\n\t\t\tthis.setState({\n\t\t\t\tisSorting: false,\n\t\t\t\tisSorted: true,\n\t\t\t})\n\t\t})\n\t}\n\t// --> Selection sort\n\n\trender() {\n\t\tconst { algorithm, number, speed, list, isSorting, isShowValue, isSorted } = this.state\n\t\treturn <React.Fragment>\n\t\t\t<div className='inline' style={{ marginRight: '30px' }}>Chose algorithm: </div>\n\t\t\t<select value={algorithm} onChange={this.onChangAlgorithm}>\n\t\t\t\t{this.algorithms.map((elm, i) => <option key={i}>{elm}</option>)}\n\t\t\t</select>\n\n\t\t\t<div className='center bold'>{algorithm.toUpperCase()} VISUALIZER</div><br />\n\n\t\t\t<div className='inline' style={{ marginRight: '30px' }}>Number of elements: <br /><input placeholder={this.defaultNumber} value={number} onChange={this.onChangeNumber} disabled={isSorting} /></div>\n\t\t\t<div>Re-generate elements (random):<br /><button onClick={this.onGenerate} disabled={isSorting} >Generate</button></div><br />\n\t\t\t<div className='inline' style={{ marginRight: '15px' }}>Speed of sorting (second/step): <br /><input placeholder={this.defaultSpeed} value={speed} onChange={this.onChangeSpeed} /></div>\n\t\t\t<div>Show value in columns:<br /><button onClick={this.onToggleShowValue} >{isShowValue ? 'Hide' : 'Show'}</button></div><br /><br />\n\t\t\t{isSorted ?\n\t\t\t\t<div><button className='bold' onClick={this.onResore}>Back</button></div>\n\t\t\t\t:\n\t\t\t\t(!isSorting ?\n\t\t\t\t\t<div><button className='bold' onClick={() => this.onSort(algorithm)}>Sort</button></div>\n\t\t\t\t\t:\n\t\t\t\t\t<div><button className='bold' onClick={this.onStop}>Calcel</button></div>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\t<div className='list'>\n\t\t\t\t{list.map((elm, i) => <div key={i} className={'element ' + elm.color + ' ' + i} style={{ height: 6 * elm.value + 'px' }}>{isShowValue ? elm.value : ''}</div>)}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div className='inline'>Note of color states:</div>\n\t\t\t\t<div className='blue inline' style={{ height: '20px', width: '20px' }} /><div className='inline'>Compare</div>\n\t\t\t\t<div className='green inline' style={{ height: '20px', width: '20px' }} /><div className='inline'>Swap</div>\n\t\t\t\t<div className={'yellow inline'} style={{ height: '20px', width: '20px' }} /><div className='inline'>Done</div>\n\t\t\t</div>\n\n\t\t</React.Fragment >\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}